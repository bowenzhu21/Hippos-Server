<!DOCTYPE html>
<html lang="en">
<head>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <meta charset="UTF-8" />
  <title>Hippos Mock Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; background-color: rgb(199, 233, 255); }
    h2 { margin-top: 30px; }
    pre {
      background: #f4f4f4;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
      white-space: pre-wrap;
    }
    canvas { background: #fff; border-radius: 8px; }
    /* Chart container: full width, fixed height */
    .chart-wrap {
      height: 250px;   /* fixed chart height */
      width: 100%;     /* full width like the <pre> blocks */
    }
  </style>
</head>
<body>
  <h1>Knee Brace Data Dashboard</h1>

  <h2>Processed Data</h2>
  <pre id="processed">Loading...</pre>

  <h2>Flexion Angle Over Time</h2>
  <!-- Full-width chart -->
  <div class="chart-wrap">
    <canvas id="mainChart"></canvas>
  </div>

  <h2>Raw Data (For Ursula)</h2>
  <pre id="raw">Loading...</pre>

<script>
  // ----- CONFIG -----
  // λ for the complementary-style fusion: small lambda trusts gyro integration more;
  // larger lambda trusts accelerometer more.
  const LAMBDA = 0.01;

  // Endpoint URLs
  const URL_HISTORY = "http://localhost:5050/history";
  const URL_LATEST_PROCESSED = "http://localhost:5050/latest_processed";
  const URL_LATEST_RAW = "http://localhost:5050/latest_raw";

  // ----- CHART -----
  const ctx = document.getElementById("mainChart").getContext("2d");
  const mainChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: [], // relative time (s)
      datasets: [
        {
          label: 'Accel (Avg 1)',
          data: [],
          borderColor: 'rgba(255, 99, 132, 1)',
          borderDash: [6, 4],       // dotted
          borderWidth: 2,
          fill: false,
          tension: 0.3,
          pointRadius: 0
        },
        {
          label: 'Gyro (Avg 2)',
          data: [],
          borderColor: 'rgba(54, 162, 235, 1)',
          borderDash: [6, 4],       // dotted
          borderWidth: 2,
          fill: false,
          tension: 0.3,
          pointRadius: 0
        },
        {
          label: 'Combined (λ=0.01)',
          data: [],
          borderColor: 'rgba(33, 33, 33, 1)', // solid main line
          borderWidth: 3,
          fill: false,
          tension: 0.3,
          pointRadius: 0
        }
      ]
    },
    options: {
      animation: false,
      responsive: true,
      maintainAspectRatio: false,  // container controls height
      plugins: {
        legend: { position: 'top' },
        tooltip: { mode: 'index', intersect: false }
      },
      scales: {
        x: {
          title: { display: true, text: 'Time (s)' },
          ticks: { autoSkip: true, maxTicksLimit: 12 }
        },
        y: {
          title: { display: true, text: 'Angle (deg)' },
          beginAtZero: false
        }
      }
    }
  });

  // ----- STATE -----
  let startTime = Date.now();
  let lastProcessedTimestamp = null;

  // for complementary filter state
  let prevCombined = null;
  let prevGyro = null;

  // Push one point to the chart (acc = avg1, gyr = avg2)
  function pushPoint(relTime, acc, gyr, comb) {
    mainChart.data.labels.push(relTime);
    mainChart.data.datasets[0].data.push(acc);
    mainChart.data.datasets[1].data.push(gyr);
    mainChart.data.datasets[2].data.push(comb);
  }

  // Compute combined using the complementary formula:
  // α_comb(t) = λ*acc(t) + (1-λ)*( α_comb(t-Δt) + gyr(t) - gyr(t-Δt) )
  function computeCombined(acc_t, gyr_t) {
    // Initialize first sample if needed
    if (prevCombined === null || prevGyro === null) {
      prevCombined = acc_t;   // common practical init
      prevGyro = gyr_t;
      return prevCombined;
    }
    const combined_t = LAMBDA * acc_t + (1 - LAMBDA) * (prevCombined + (gyr_t - prevGyro));
    prevCombined = combined_t;
    prevGyro = gyr_t;
    return combined_t;
  }

  // ----- HISTORY LOAD -----
  async function loadHistory() {
    try {
      const res = await fetch(URL_HISTORY);
      const data = await res.json();

      if (Array.isArray(data) && data.length > 0) {
        const baseTime = data[0].timestamp; // seconds
        startTime = baseTime * 1000;

        // reset fusion state before replaying history
        prevCombined = null;
        prevGyro = null;

        for (const entry of data) {
          // Map your API fields to acc/gyr:
          // Average 1 (acc) should come from p1_avg
          // Average 2 (gyr) should come from p2_avg
          const acc = Number(entry.p1_avg);
          const gyr = Number(entry.p2_avg);
          if (Number.isNaN(acc) || Number.isNaN(gyr)) continue;

          const comb = computeCombined(acc, gyr);

          const relTime = (entry.timestamp - baseTime).toFixed(1);
          pushPoint(relTime, acc, gyr, comb);
          lastProcessedTimestamp = entry.timestamp;
        }
        mainChart.update();
      }
    } catch (e) {
      console.error("Failed to load history:", e);
    }
  }

  // ----- LIVE POLL -----
  async function fetchData() {
    try {
      const processedRes = await fetch(URL_LATEST_PROCESSED);
      const processedData = await processedRes.json();
      document.getElementById("processed").textContent = JSON.stringify(processedData, null, 2);

      const rawRes = await fetch(URL_LATEST_RAW);
      const rawData = await rawRes.json();
      document.getElementById("raw").textContent = JSON.stringify(rawData, null, 2);

      if (processedData.timestamp && processedData.timestamp !== lastProcessedTimestamp) {
        lastProcessedTimestamp = processedData.timestamp;

        // Average 1 = acc, Average 2 = gyr
        const acc = Number(processedData.p1_avg ?? processedData.p1);
        const gyr = Number(processedData.p2_avg ?? processedData.p2);
        if (!Number.isNaN(acc) && !Number.isNaN(gyr)) {
          const comb = computeCombined(acc, gyr);
          const relTime = ((processedData.timestamp * 1000 - startTime) / 1000).toFixed(1);
          pushPoint(relTime, acc, gyr, comb);
          mainChart.update();
        }
      }
    } catch (err) {
      console.error("Error fetching data:", err);
    }
  }

  // ----- INIT -----
  (async function init() {
    await loadHistory();
    await fetchData();
    setInterval(fetchData, 500);
  })();
</script>
</body>
</html>